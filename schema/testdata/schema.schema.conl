; A CONL schema describes a set of CONL documents.
;
; It consists of a map of named definitions, each built up of matchers.
;
root = <schema>
definitions
  schema
    required keys
      root
        matches = <matcher>
        docs = A reference to the definition to match against the root of the document.
      definitions
        matches = <definitions>
        docs = The definitions which make up the schema.
    keys
      schema
        matches = .*
        docs = """markdown
          An (optional) URL or file path to the schema definition that describes this schema.

          For example https://conl.dev/schema/schema.conl

  definitions
    keys
      .* = <definition>

  definition
    one of
      = <scalar>
      = <map>
      = <list>
      = <one of>

  scalar
    keys
      scalar
        matches = <matcher>
        docs =  Matches scalars with the given matcher.

  one of
    required keys
      one of
        matches = <matcher list>
        docs = Matches values which match any of the given matchers.

  ; A list definition matcches a list.
  list
    keys
      required items
        matches = <matcher list>
        docs = """markdown
          Matches lists item-by-item with the given matchers.

          If `items` is also set, then every required item must exist, and
          the list may have any number of additional items that match `items`.

      items
        matches = <matcher>
        docs = Matches lists where every item matches the given matcher.

  ; A "map" definition matches a CONL map.
  map
    keys
      required keys
        matches = <matcher map>
        docs = """markdown
          Matches maps where exactly one key-value pair matches each required key-value pair.

          If `keys` is also set, then additional keys are also allowed.
      keys =
        matches = <matcher map>
        docs = """markdown
          Matches maps where every key-value pair matches the given matcher.

          Unless `required keys` is also set, this matches empty maps.

  value matcher
    one of
      ; If a matcher starts with < it is a reference to a definition
      ; elsewhere in the schema. Values match this matcher if they match
      ; that definition.
      = \<(.*)>
      ; Otherwise, it is a regular expression. Values match this matcher
      ; if they are scalars that match the regular expression.
      = [^<].*

  documented matcher
    required keys
      matches = <value matcher>
    keys
      docs
        matches = .*
        docs = """markdown
         Documentation for this matcher. This is typically formatted using Markdown.

  matcher
    one of
      = <value matcher>
      = <documented matcher>

  matcher list
    items = <matcher>

  matcher map
    keys
      <value matcher> = <matcher>
