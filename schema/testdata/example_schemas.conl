; basic
root
  keys
    username = \w+
---
username = * ; 11-12 expected username = \w+

===
; two errors
root
  keys
    username = \w+
---
username = * ; 11-12 expected username = \w+
password = example ; 0-8 unexpected key password

===
; empty
root
  keys
    username = \w+
---

===
; missing required key
root
  required keys
    username = \w+
---
password = example ; 0-8 unexpected key password; 0-18 missing required key username
===
; multiple allowed keys ok
root
  keys
    username = \w+
    code .* = [0-9]+
---
code home = 1234
===
; multiple allowed keys with error

root
  keys
    username = \w+
    code .* = [0-9]+
---
code home = 123r ; 12-16 expected code home = [0-9]+
===
; empty
test
  keys
root
  keys
    test = <test>
---
test

===
; empty failure
test
  keys
root
  keys
    test .* = <test>
---
test 1 = a ; 9-10 expected test 1 = no value
test 2 ; 0-6 expected test 2 = no value
  = a

===
; empty doc
root
  keys
    test = test
---

===
; referenced map

test
  keys
    username = \w+
    code .* = [0-9]+
root
  keys
    test = <test>
---
test
  code home = 123r ; 14-18 expected code home = [0-9]+

===
; one of scalars
test
  one of
    = a
    = b
    = c
root
  keys
    test .* = <test>
---
test a = a
test b = b
test d = d ; 9-10 expected test d = a, b or c

===
; one of required keys
a
  required keys
    type = a
b
  required keys
    type = b
test
  one of
    = <a>
    = <b>
root
  keys
    test .* = <test>
---
test a
  type = a
test b
  type = b
test c
  type = c ; 9-10 expected type = a or b

===
; one of required keys more
a
  required keys
    a = true
b
  required keys
    b = true
test
  one of
    = <a>
    = <b>
root
  keys
    test .* = <test>
---
test a
  a = true
test b
  b = true
test c ; 0-6 missing required key a or b
  c = true ; 2-3 unexpected key c


===
; incompatibility error
a
  keys
    a = true
b
  keys
    b = true
test
  one of
    = <a>
    = <b>
root
  keys
    test .* = <test>
---
test a
  a = true
test b
  b = true
test c
  c = true ; 2-3 unexpected key c

===
; confusing incompatibility error
a
  keys
    a = true
    c = false
b
  keys
    b = true
    c = true
test
  one of
    = <a>
    = <b>
root
  keys
    test .* = <test>
---
test 1
  a = true
  c = true ; 6-10 expected c = false
test 2
  a = true
  c = false
test 3
  b = true
  c = false ; 6-11 expected c = true

===
; simple lists
test
  items = <bool>

bool
  one of
    = true
    = false

root
  keys
    test .* = <test>
---
test 1
 = true
 = false
test 2
 = foo ; 3-6 expected true or false
test 3

===
; required lists
test
  required items
    = 1

root
  keys
    test .* = <test>
---
test 1
 = 1
test 2
 = 1
 = 2 ; 1-2 unexpected list item
test 3 ; 0-6 missing required list item 1

===
; mixed lists
test
  required items
    = 1
  items = 2

root
  keys
    test .* = <test>
---
test 1
 = 1
test 2
 = 1
 = 2
test 3 ; 0-6 missing required list item 1
test 4
 = 2 ; 3-4 expected 1
test 5
 = 1
 = 3 ; 3-4 expected 2

===
; mixed types
test
  one of
    = true
    = <data>
data
  required keys
    timeout = \d+ *(s|ms)

root
  keys
    test .* = <test>
---
test 1 = false ; 9-14 expected test 1 = true or a map

===
; mixed types list
test
  one of
    = <map>
    = <list>
map
  required keys
    timeout = \d+ *(s|ms)
list
  required items
    = \d+ *(s|ms)

root
  keys
    test .* = <test>
---
test 1 = false ; 9-14 expected test 1 = a map or a list
test 2
  = 5s
test 3 ; 0-6 missing required key timeout
  duration = 5s
test 4
  timeout = 10ms
===
; scalar
test
  scalar = [a-z]+
root
  keys
    test .* = <test>
---
test 1 = abc
test 2 = 123 ; 9-12 expected test 2 = [a-z]+
test 4 = abc
  test 4 ; 2-8 unexpected indent
test 3 ; 0-6 expected test 3 = any scalar
test 6 = asd
===
; errors
test
  items = .*
root
  keys
    test .* = <test>
---
test 1
  = 1
  = """ ; 4-7 missing multiline value
  a = b ; 2-3 unexpected map key
===
; duplicate required keys
test
  required keys
    a|b = .*
    c|d = .*
root
  keys
    test .* = <test>
---
test 1 ; 0-6 missing required key c|d
  a = 1
  b = 2 ; 2-3 duplicate key a|b
test 2
  a = 1
  c = 2
  d = 3 ; 2-3 duplicate key c|d
===
; duplicate allowed keys
test
  keys
    a|b = .*
root
  keys
    test .* = <test>
---
test 1
  a = 1
  b = 2
test 2
  a = 1
  a = 2 ; 2-3 duplicate key a
test 3
  c = 1 ; 2-3 unexpected key c
  c = 2 ; 2-3 duplicate key c
===
; any schema
root
  one of
    = <map>
    = <list>
    = <scalar>

scalar
  scalar = .*

list
  items = <root>

map
  keys
    <scalar> = <root>
---
map
  keys

  keys ; 2-6 duplicate key keys

  "hello" = """bash
    #!/bin/bash
    echo "hello world"
